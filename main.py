import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ForceReply
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from data import TOKEN, GREETING, ADMIN_ID, DEFAULT_ANSWER
from database_manager import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger('AnonBot')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
db = DatabaseManager()

# –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
@dp.update.middleware
async def db_middleware(handler, event, data):
    await db.connect()
    data["db"] = db
    result = await handler(event, data)
    await db.close()
    return result

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def admin_panel_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="admin_promote")
    )
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def start_handler(message: Message, db: DatabaseManager):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "Anonymous"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await db.get_user(user_id):
            await db.insert(username, user_id)
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
        user = await db.get_user(user_id)
        keyboard = None
        if user and user[3] == 2:  # user[3] = level
            keyboard = await admin_panel_kb()

        await message.answer(GREETING, reply_markup=keyboard)

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞: {e}')
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π
@dp.callback_query(F.data.startswith("admin_"))
async def admin_actions(callback: types.CallbackQuery, db: DatabaseManager):
    user = await db.get_user(callback.from_user.id)
    if not user or user[3] != 2:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    action = callback.data.split("_")[1]

    if action == "stats":
        users = await db.get_all_users()
        stats = "\n".join([f"{u[1]}: {u[4]} —Å–æ–æ–±—â." for u in users])
        await callback.message.edit_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{stats}",
            reply_markup=await admin_panel_kb()
        )

    elif action == "broadcast":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=ForceReply(selective=True)
        )

    elif action == "promote":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=ForceReply(selective=True)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
@dp.message(F.reply_to_message)
async def handle_replies(message: Message, db: DatabaseManager):
    admin = await db.get_user(message.from_user.id)
    if not admin or admin[3] != 2:
        return

    reply_text = message.reply_to_message.text

    if "—Ä–∞—Å—Å—ã–ª–∫" in reply_text:
        users = await db.get_users_by_level(1)
        success = 0
        for user in users:
            try:
                await bot.send_message(user[2], message.text)
                success += 1
            except:
                pass
        await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(users)}")

    elif "–ø–æ–≤—ã—à–µ–Ω–∏" in reply_text:
        try:
            tg_id = int(message.text)
            target = await db.get_user(tg_id)
            if target:
                await db.update_user_level(tg_id, 2)
                await message.answer(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {tg_id} –ø–æ–≤—ã—à–µ–Ω!")
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_content(message: Message, db: DatabaseManager):
    try:
        if message.from_user.id == ADMIN_ID:
            return

        user = await db.get_user(message.from_user.id)
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start")
            return

        # –£—á—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        await db.increment_message_count(message.from_user.id)

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω—É
        if message.text:
            await bot.send_message(ADMIN_ID, f"‚úâÔ∏è –ê–Ω–æ–Ω–∏–º: {message.text}")
        elif message.photo:
            await bot.send_photo(
                ADMIN_ID,
                message.photo[-1].file_id,
                caption=f"üì∏ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Ñ–æ—Ç–æ\n{message.caption or ''}"
            )
        elif message.video:  # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ
            await bot.send_video(
                ADMIN_ID,
                message.video.file_id,
                caption=f"üé• –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≤–∏–¥–µ–æ\n{message.caption or ''}"
            )

        await message.answer(DEFAULT_ANSWER)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")